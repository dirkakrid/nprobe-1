// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: fastbit.proto

#include "fastbit.pb.h"
#include "fastbit.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace profastbit {

static const char* dump_fastbit_method_names[] = {
  "/profastbit.dump_fastbit/dumptofast",
};

std::unique_ptr< dump_fastbit::Stub> dump_fastbit::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< dump_fastbit::Stub> stub(new dump_fastbit::Stub(channel));
  return stub;
}

dump_fastbit::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_dumptofast_(dump_fastbit_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status dump_fastbit::Stub::dumptofast(::grpc::ClientContext* context, const ::profastbit::prodata& request, ::profastbit::datareply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_dumptofast_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::profastbit::datareply>* dump_fastbit::Stub::AsyncdumptofastRaw(::grpc::ClientContext* context, const ::profastbit::prodata& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::profastbit::datareply>(channel_.get(), cq, rpcmethod_dumptofast_, context, request);
}

dump_fastbit::AsyncService::AsyncService() : ::grpc::AsynchronousService(dump_fastbit_method_names, 1) {}

dump_fastbit::Service::Service() {
}

dump_fastbit::Service::~Service() {
}

::grpc::Status dump_fastbit::Service::dumptofast(::grpc::ServerContext* context, const ::profastbit::prodata* request, ::profastbit::datareply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void dump_fastbit::AsyncService::Requestdumptofast(::grpc::ServerContext* context, ::profastbit::prodata* request, ::grpc::ServerAsyncResponseWriter< ::profastbit::datareply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* dump_fastbit::Service::service() {
  if (service_) {
    return service_.get();
  }
  service_ = std::unique_ptr< ::grpc::RpcService>(new ::grpc::RpcService());
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      dump_fastbit_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< dump_fastbit::Service, ::profastbit::prodata, ::profastbit::datareply>(
          std::mem_fn(&dump_fastbit::Service::dumptofast), this)));
  return service_.get();
}


}  // namespace profastbit

